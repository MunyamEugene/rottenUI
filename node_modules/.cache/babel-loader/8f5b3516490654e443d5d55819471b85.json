{"ast":null,"code":"import actionNames from \".\";\n\nconst hotel = function (action) {\n  let state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  switch (action.type) {\n    case actionNames.SUCCESS_HOTELS:\n      return {\n        id: state.id,\n        name: state.name,\n        stars: state.stars,\n        location: state.location,\n        services: state.services\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const hotels = function (action) {\n  let state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  switch (action.type) {\n    case actionNames.SUCCESS_HOTELS:\n      return state.map(htel => hotel(action, htel));\n\n    default:\n      return state;\n  }\n};\n\nconst service = function (action) {\n  let state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  switch (action.type) {\n    case actionNames.SUCCESS_SERVICES:\n      return {\n        id: state.id,\n        name: state.name\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const services = function (action) {\n  let state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  switch (action.type) {\n    case action.SUCCESS_SERVICES:\n      return state.map(servc => service(action, servc));\n\n    default:\n      return state;\n  }\n};\n\nconst vote = function (action) {\n  let state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  switch (action.type) {\n    case actionNames.SUCCESS_VOTE:\n      return {\n        id: action.id,\n        hotelId: state.hotelId,\n        serviceId: state.serviceId,\n        votes: state.vote,\n        email: state.email,\n        createdAt: state.createdAt,\n        updatedAt: state.updatedAt,\n        service: state.service\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const votes = function (action) {\n  let state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  switch (action.type) {\n    case actionNames.SUCCESS_VOTE:\n      return state.map(rate => vote(action, rate));\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/home/eugene/Desktop/rotten-ui/src/redux/reducers/reducers.js"],"names":["actionNames","hotel","action","state","type","SUCCESS_HOTELS","id","name","stars","location","services","hotels","map","htel","service","SUCCESS_SERVICES","servc","vote","SUCCESS_VOTE","hotelId","serviceId","votes","email","createdAt","updatedAt","rate"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,GAAxB;;AAEC,MAAMC,KAAK,GAAG,UAACC,MAAD,EAAmB;AAAA,MAAXC,KAAW,uEAAL,EAAK;;AAC9B,UAAQD,MAAM,CAACE,IAAf;AACI,SAAKJ,WAAW,CAACK,cAAjB;AACI,aAAO;AACPC,QAAAA,EAAE,EAACH,KAAK,CAACG,EADF;AAEPC,QAAAA,IAAI,EAAEJ,KAAK,CAACI,IAFL;AAGPC,QAAAA,KAAK,EAAEL,KAAK,CAACK,KAHN;AAIPC,QAAAA,QAAQ,EAAEN,KAAK,CAACM,QAJT;AAKPC,QAAAA,QAAQ,EAACP,KAAK,CAACO;AALR,OAAP;;AAOJ;AACI,aAAOP,KAAP;AAVR;AAYH,CAbA;;AAeD,OAAO,MAAMQ,MAAM,GAAG,UAACT,MAAD,EAAmB;AAAA,MAAXC,KAAW,uEAAL,EAAK;;AACrC,UAAQD,MAAM,CAACE,IAAf;AACI,SAAKJ,WAAW,CAACK,cAAjB;AACI,aAAOF,KAAK,CAACS,GAAN,CAAUC,IAAI,IAAEZ,KAAK,CAACC,MAAD,EAAQW,IAAR,CAArB,CAAP;;AACJ;AACI,aAAOV,KAAP;AAJR;AAOH,CARM;;AASP,MAAMW,OAAO,GAAG,UAACZ,MAAD,EAAmB;AAAA,MAAXC,KAAW,uEAAL,EAAK;;AAC/B,UAAQD,MAAM,CAACE,IAAf;AACI,SAAKJ,WAAW,CAACe,gBAAjB;AACI,aAAM;AACFT,QAAAA,EAAE,EAACH,KAAK,CAACG,EADP;AAEFC,QAAAA,IAAI,EAACJ,KAAK,CAACI;AAFT,OAAN;;AAIJ;AACI,aAAOJ,KAAP;AAPR;AASH,CAVD;;AAWA,OAAO,MAAMO,QAAQ,GAAG,UAACR,MAAD,EAAmB;AAAA,MAAXC,KAAW,uEAAL,EAAK;;AACvC,UAAQD,MAAM,CAACE,IAAf;AACI,SAAKF,MAAM,CAACa,gBAAZ;AACI,aAAOZ,KAAK,CAACS,GAAN,CAAWI,KAAD,IAASF,OAAO,CAACZ,MAAD,EAAQc,KAAR,CAA1B,CAAP;;AACJ;AACI,aAAOb,KAAP;AAJR;AAMH,CAPM;;AASN,MAAMc,IAAI,GAAG,UAACf,MAAD,EAAmB;AAAA,MAAXC,KAAW,uEAAL,EAAK;;AAC7B,UAAQD,MAAM,CAACE,IAAf;AACI,SAAKJ,WAAW,CAACkB,YAAjB;AACI,aAAO;AACHZ,QAAAA,EAAE,EAACJ,MAAM,CAACI,EADP;AAEHa,QAAAA,OAAO,EAAEhB,KAAK,CAACgB,OAFZ;AAGHC,QAAAA,SAAS,EAAEjB,KAAK,CAACiB,SAHd;AAIHC,QAAAA,KAAK,EAAElB,KAAK,CAACc,IAJV;AAKHK,QAAAA,KAAK,EAAEnB,KAAK,CAACmB,KALV;AAMHC,QAAAA,SAAS,EAAEpB,KAAK,CAACoB,SANd;AAOFC,QAAAA,SAAS,EAAErB,KAAK,CAACqB,SAPf;AAQFV,QAAAA,OAAO,EAAEX,KAAK,CAACW;AARb,OAAP;;AAUJ;AACI,aAAOX,KAAP;AAbR;AAeH,CAhBA;;AAkBD,OAAO,MAAMkB,KAAK,GAAG,UAACnB,MAAD,EAAmB;AAAA,MAAXC,KAAW,uEAAL,EAAK;;AACpC,UAAQD,MAAM,CAACE,IAAf;AACI,SAAKJ,WAAW,CAACkB,YAAjB;AACI,aAAOf,KAAK,CAACS,GAAN,CAAWa,IAAD,IAAQR,IAAI,CAACf,MAAD,EAAQuB,IAAR,CAAtB,CAAP;;AACJ;AACI,aAAOtB,KAAP;AAJR;AAMH,CAPM","sourcesContent":["import actionNames from \".\"\n\n const hotel = (action,state={})=>{\n    switch (action.type) {\n        case actionNames.SUCCESS_HOTELS:\n            return {\n            id:state.id,\n            name: state.name,\n            stars: state.stars,\n            location: state.location,\n            services:state.services\n            }\n        default:\n            return state;\n    }\n}\n\nexport const hotels = (action,state=[])=>{\n    switch (action.type) {\n        case actionNames.SUCCESS_HOTELS:\n            return state.map(htel=>hotel(action,htel));\n        default:\n            return state;\n    }\n\n}\nconst service = (action,state={})=>{\n    switch (action.type) {\n        case actionNames.SUCCESS_SERVICES:\n            return{\n                id:state.id,\n                name:state.name\n            }\n        default:\n            return state;\n    }\n}\nexport const services = (action,state=[])=>{\n    switch (action.type) {\n        case action.SUCCESS_SERVICES:\n            return state.map((servc)=>service(action,servc))\n        default:\n            return state;\n    }\n}\n\n const vote = (action,state={})=>{\n    switch (action.type) {\n        case actionNames.SUCCESS_VOTE:\n            return {\n                id:action.id,\n                hotelId: state.hotelId,\n                serviceId: state.serviceId,\n                votes: state.vote,\n                email: state.email,\n                createdAt: state.createdAt,\n                 updatedAt: state.updatedAt,\n                 service: state.service\n            }\n        default:\n            return state;\n    }\n}\n\nexport const votes = (action,state=[])=>{\n    switch (action.type) {\n        case actionNames.SUCCESS_VOTE:\n            return state.map((rate)=>vote(action,rate))\n        default:\n            return state;\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}