{"ast":null,"code":"import actionNames from \"../actions/actionTypes\"; //  const hotel = (state={},action)=>{\n//     switch (action.type) {\n//         case actionNames.SUCCESS_HOTELS:\n//             return {\n//             id:state.id,\n//             name: state.name,\n//             stars: state.stars,\n//             location: state.location,\n//             services:state.services\n//             }\n//         default:\n//             return state;\n//     }\n// }\n\nexport const hotels = (state, action) => {\n  switch (action.type) {\n    case actionNames.SUCCESS_HOTELS:\n      console.log(state);\n      return [];\n\n    default:\n      return state;\n  }\n};\n\nconst service = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actionNames.SUCCESS_SERVICES:\n      return {\n        id: state.id,\n        name: state.name\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const services = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case action.SUCCESS_SERVICES:\n      return state.map(servc => service(action, servc));\n\n    default:\n      return state;\n  }\n};\n\nconst vote = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actionNames.SUCCESS_VOTE:\n      return {\n        id: action.id,\n        hotelId: state.hotelId,\n        serviceId: state.serviceId,\n        votes: state.vote,\n        email: state.email,\n        createdAt: state.createdAt,\n        updatedAt: state.updatedAt,\n        service: state.service\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const votes = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actionNames.SUCCESS_VOTE:\n      return state.map(rate => vote(action, rate));\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/home/eugene/Desktop/rotten-ui/src/redux/reducers/reducers.js"],"names":["actionNames","hotels","state","action","type","SUCCESS_HOTELS","console","log","service","SUCCESS_SERVICES","id","name","services","map","servc","vote","SUCCESS_VOTE","hotelId","serviceId","votes","email","createdAt","updatedAt","rate"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,wBAAxB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,MAAM,GAAG,CAACC,KAAD,EAAOC,MAAP,KAAgB;AAClC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKJ,WAAW,CAACK,cAAjB;AACIC,MAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACA,aAAO,EAAP;;AACJ;AACI,aAAOA,KAAP;AALR;AAQH,CATM;;AAUP,MAAMM,OAAO,GAAG,YAAmB;AAAA,MAAlBN,KAAkB,uEAAZ,EAAY;AAAA,MAATC,MAAS;;AAC/B,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKJ,WAAW,CAACS,gBAAjB;AACI,aAAM;AACFC,QAAAA,EAAE,EAACR,KAAK,CAACQ,EADP;AAEFC,QAAAA,IAAI,EAACT,KAAK,CAACS;AAFT,OAAN;;AAIJ;AACI,aAAOT,KAAP;AAPR;AASH,CAVD;;AAWA,OAAO,MAAMU,QAAQ,GAAG,YAAmB;AAAA,MAAlBV,KAAkB,uEAAZ,EAAY;AAAA,MAATC,MAAS;;AACvC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKD,MAAM,CAACM,gBAAZ;AACI,aAAOP,KAAK,CAACW,GAAN,CAAWC,KAAD,IAASN,OAAO,CAACL,MAAD,EAAQW,KAAR,CAA1B,CAAP;;AACJ;AACI,aAAOZ,KAAP;AAJR;AAMH,CAPM;;AASN,MAAMa,IAAI,GAAG,YAAmB;AAAA,MAAlBb,KAAkB,uEAAZ,EAAY;AAAA,MAATC,MAAS;;AAC7B,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKJ,WAAW,CAACgB,YAAjB;AACI,aAAO;AACHN,QAAAA,EAAE,EAACP,MAAM,CAACO,EADP;AAEHO,QAAAA,OAAO,EAAEf,KAAK,CAACe,OAFZ;AAGHC,QAAAA,SAAS,EAAEhB,KAAK,CAACgB,SAHd;AAIHC,QAAAA,KAAK,EAAEjB,KAAK,CAACa,IAJV;AAKHK,QAAAA,KAAK,EAAElB,KAAK,CAACkB,KALV;AAMHC,QAAAA,SAAS,EAAEnB,KAAK,CAACmB,SANd;AAOFC,QAAAA,SAAS,EAAEpB,KAAK,CAACoB,SAPf;AAQFd,QAAAA,OAAO,EAAEN,KAAK,CAACM;AARb,OAAP;;AAUJ;AACI,aAAON,KAAP;AAbR;AAeH,CAhBA;;AAkBD,OAAO,MAAMiB,KAAK,GAAG,YAAmB;AAAA,MAAlBjB,KAAkB,uEAAZ,EAAY;AAAA,MAATC,MAAS;;AACpC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKJ,WAAW,CAACgB,YAAjB;AACI,aAAOd,KAAK,CAACW,GAAN,CAAWU,IAAD,IAAQR,IAAI,CAACZ,MAAD,EAAQoB,IAAR,CAAtB,CAAP;;AACJ;AACI,aAAOrB,KAAP;AAJR;AAMH,CAPM","sourcesContent":["import actionNames from \"../actions/actionTypes\"\n\n//  const hotel = (state={},action)=>{\n//     switch (action.type) {\n//         case actionNames.SUCCESS_HOTELS:\n//             return {\n//             id:state.id,\n//             name: state.name,\n//             stars: state.stars,\n//             location: state.location,\n//             services:state.services\n//             }\n//         default:\n//             return state;\n//     }\n// }\n\nexport const hotels = (state,action)=>{\n    switch (action.type) {\n        case actionNames.SUCCESS_HOTELS:\n            console.log(state)\n            return [];\n        default:\n            return state;\n    }\n\n}\nconst service = (state={},action)=>{\n    switch (action.type) {\n        case actionNames.SUCCESS_SERVICES:\n            return{\n                id:state.id,\n                name:state.name\n            }\n        default:\n            return state;\n    }\n}\nexport const services = (state=[],action)=>{\n    switch (action.type) {\n        case action.SUCCESS_SERVICES:\n            return state.map((servc)=>service(action,servc))\n        default:\n            return state;\n    }\n}\n\n const vote = (state={},action)=>{\n    switch (action.type) {\n        case actionNames.SUCCESS_VOTE:\n            return {\n                id:action.id,\n                hotelId: state.hotelId,\n                serviceId: state.serviceId,\n                votes: state.vote,\n                email: state.email,\n                createdAt: state.createdAt,\n                 updatedAt: state.updatedAt,\n                 service: state.service\n            }\n        default:\n            return state;\n    }\n}\n\nexport const votes = (state=[],action)=>{\n    switch (action.type) {\n        case actionNames.SUCCESS_VOTE:\n            return state.map((rate)=>vote(action,rate))\n        default:\n            return state;\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}